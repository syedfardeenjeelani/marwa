---
import Layout from '../../layouts/Layout.astro';
import { getPosts } from '../../lib/getPosts';
import TransparentNavbar from '../../components/Navbar';

// This function is required for dynamic routes
export async function getStaticPaths() {
  // Fetch all blogs to generate paths
  const blogs = await getPosts(); // You'll need this function in your sanity lib
  
  return blogs.map((blog: any) => ({
    params: { slug: blog.slug.current },
    props: { blog }, // Pass the blog data as props
  }));
}

// Get the blog data from props (passed from getStaticPaths)
const { blog } : { blog : any} = Astro.props;

// Handle case where blog is not found
if (!blog) {
  return Astro.redirect('/404');
}

// Extract text from Sanity block content with proper null checking
const extractedText = blog.body
  ?.map((block: any) => 
    block.children
      ?.map((child: any) => child.text || '')
      .join('') || ''
  )
  .join(' ') || 'No content available';

console.log(extractedText, 'blog text extracted');

---

<Layout>
  <div class="min-h-screen bg-gradient-to-br from-slate-50 to-white">
    <TransparentNavbar client:load />
    
    <!-- Main Content Container -->
    <div class="max-w-4xl mx-auto px-6 py-24">
      
      <!-- Breadcrumb -->
      <nav class="mb-8">
        <ol class="flex items-center space-x-2 text-sm text-gray-600">
          <li><a href="/" class="hover:text-gray-900 transition-colors font-medium">Home</a></li>
          <li class="text-gray-400">/</li>
          <li><a href="/blog" class="hover:text-gray-900 transition-colors font-medium">Blog</a></li>
          <li class="text-gray-400">/</li>
          <li class="text-gray-900 font-medium">Article</li>
        </ol>
      </nav>

      <!-- Article Header -->
      <header class="mb-12">
        

        <!-- Meta Information -->
        <div class="flex flex-wrap items-center gap-6 text-gray-600 mb-8">
          <div class="flex items-center space-x-2">
            <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 7V3m8 4V3m-9 8h10M5 21h14a2 2 0 002-2V7a2 2 0 00-2-2H5a2 2 0 00-2 2v12a2 2 0 002 2z"/>
            </svg>
            <span class="font-medium">
              {new Date(blog.publishedAt).toLocaleDateString('en-US', { 
                year: 'numeric', 
                month: 'long', 
                day: 'numeric' 
              })}
            </span>
          </div>
          <div class="flex items-center space-x-2">
            <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 8v4l3 3m6-3a9 9 0 11-18 0 9 9 0 0118 0z"/>
            </svg>
            <span class="font-medium">5 min read</span>
          </div>
        </div>
      </header>

      <!-- Featured Image -->
      <div class="mb-12">
        <div class="relative overflow-hidden rounded-2xl shadow-xl">
          <img 
            src={blog.mainImage?.asset?.url || '/default-blog-image.jpg'} 
            alt={blog.title} 
            class="w-full h-[400px] md:h-[500px] object-cover" 
          />
        </div>
      </div>

      <!-- Article Content -->
      <article class="prose prose-lg md:prose-xl max-w-none">
        <div class="text-lg leading-relaxed text-gray-800 space-y-6">
          {extractedText.split('\n\n').filter((paragraph: string) => paragraph.trim()).map((paragraph: string, index: number) => (
            <p key={index} class={`${index === 0 ? "first-letter:text-6xl first-letter:font-bold first-letter:text-gray-900 first-letter:float-left first-letter:mr-3 first-letter:mt-1 first-line:font-semibold text-xl" : ""}`}>
              {paragraph.trim()}
            </p>
          ))}
        </div>
        
      </article>

      <!-- Article Footer -->
      <footer class="mt-16 pt-8 border-t border-gray-200">
        <div class="flex flex-col lg:flex-row justify-between items-start lg:items-center gap-8">
          <!-- Tags -->
          <div class="flex flex-wrap items-center gap-3">
            <span class="text-sm font-medium text-gray-600">Tags:</span>
            {blog.categories?.map((category: any, index: number) => (
              <a key={index} href={`/blog/category/${category.slug}`} class="inline-flex items-center px-3 py-1 rounded-full text-sm font-medium bg-gray-100 text-gray-800 hover:bg-gray-200 transition-colors">
                #{category.title}
              </a>
            ))}
          </div>

          <!-- Share Buttons -->
          <div class="flex items-center space-x-4">
            <span class="text-sm font-medium text-gray-600">Share:</span>
            <div class="flex space-x-2">
              <button class="p-2 rounded-full bg-blue-600 text-white hover:bg-blue-700 transition-colors">
                <svg class="w-4 h-4" fill="currentColor" viewBox="0 0 24 24">
                  <path d="M18.77 7.46H14.5v-1.9c0-.9-.02-1.5.24-2.1.22-.5.63-.8 1.15-.8H17.5v-3.4H15.17c-1.17 0-2.16.03-3.02.9-.85.85-.9 1.85-.9 3.02v4.28h-2.5v4h2.5V22h4v-10.54h3.02l.75-4z"/>
                </svg>
              </button>
              <button class="p-2 rounded-full bg-sky-500 text-white hover:bg-sky-600 transition-colors">
                <svg class="w-4 h-4" fill="currentColor" viewBox="0 0 24 24">
                  <path d="M23.32 4.56c-.8.35-1.69.59-2.6.69.94-.56 1.66-1.45 2-2.51-.88.52-1.86.9-2.9 1.1-.83-.89-2.02-1.44-3.33-1.44-2.52 0-4.57 2.04-4.57 4.57 0 .36.04.7.12 1.04-3.8-.19-7.17-2.01-9.42-4.78-.39.67-.62 1.45-.62 2.28 0 1.58.8 2.98 2.02 3.79-.75-.02-1.45-.23-2.07-.57v.06c0 2.21 1.57 4.06 3.65 4.48-.38.1-.78.16-1.2.16-.29 0-.58-.03-.86-.08.58 1.8 2.26 3.12 4.25 3.16-1.56 1.22-3.53 1.95-5.66 1.95-.37 0-.73-.02-1.09-.06 2.02 1.3 4.42 2.06 7 2.06 8.4 0 13-6.95 13-12.99 0-.2 0-.39-.01-.58.89-.64 1.67-1.44 2.28-2.35z"/>
                </svg>
              </button>
              <button class="p-2 rounded-full bg-blue-700 text-white hover:bg-blue-800 transition-colors">
                <svg class="w-4 h-4" fill="currentColor" viewBox="0 0 24 24">
                  <path d="M20.447 20.452h-3.554v-5.569c0-1.328-.027-3.037-1.852-3.037-1.853 0-2.136 1.445-2.136 2.939v5.667H9.351V9h3.414v1.561h.046c.477-.9 1.637-1.85 3.37-1.85 3.601 0 4.267 2.37 4.267 5.455v6.286zM5.337 7.433c-1.144 0-2.063-.926-2.063-2.065 0-1.138.92-2.063 2.063-2.063 1.14 0 2.064.925 2.064 2.063 0 1.139-.925 2.065-2.064 2.065zm1.782 13.019H3.555V9h3.564v11.452zM22.225 0H1.771C.792 0 0 .774 0 1.729v20.542C0 23.227.792 24 1.771 24h20.451C23.2 24 24 23.227 24 22.271V1.729C24 .774 23.2 0 22.222 0h.003z"/>
                </svg>
              </button>
              <button class="p-2 rounded-full bg-green-600 text-white hover:bg-green-700 transition-colors">
                <svg class="w-4 h-4" fill="currentColor" viewBox="0 0 24 24">
                  <path d="M17.472 14.382c-.297-.149-1.758-.867-2.03-.967-.273-.099-.471-.148-.67.15-.197.297-.767.966-.94 1.164-.173.199-.347.223-.644.075-.297-.15-1.255-.463-2.39-1.475-.883-.788-1.48-1.761-1.653-2.059-.173-.297-.018-.458.13-.606.134-.133.298-.347.446-.52.149-.174.198-.298.298-.497.099-.198.05-.371-.025-.52-.075-.149-.669-1.612-.916-2.207-.242-.579-.487-.5-.669-.51-.173-.008-.371-.01-.57-.01-.198 0-.52.074-.792.372-.272.297-1.04 1.016-1.04 2.479 0 1.462 1.065 2.875 1.213 3.074.149.198 2.096 3.2 5.077 4.487.709.306 1.262.489 1.694.625.712.227 1.36.195 1.871.118.571-.085 1.758-.719 2.006-1.413.248-.694.248-1.289.173-1.413-.074-.124-.272-.198-.57-.347m-5.421 7.403h-.004a9.87 9.87 0 01-5.031-1.378l-.361-.214-3.741.982.998-3.648-.235-.374a9.86 9.86 0 01-1.51-5.26c.001-5.45 4.436-9.884 9.888-9.884 2.64 0 5.122 1.03 6.988 2.898a9.825 9.825 0 012.893 6.994c-.003 5.45-4.437 9.884-9.885 9.884m8.413-18.297A11.815 11.815 0 0012.05 0C5.495 0 .16 5.335.157 11.892c0 2.096.547 4.142 1.588 5.945L.057 24l6.305-1.654a11.882 11.882 0 005.683 1.448h.005c6.554 0 11.890-5.335 11.893-11.893a11.821 11.821 0 00-3.48-8.413Z"/>
                </svg>
              </button>
            </div>
          </div>
        </div>
      </footer>
    </div> 
    <section class="bg-white py-12">
      <div class="text-center">
        <a 
          href="/blog" 
          class="inline-flex items-center px-8 py-3 bg-gray-900 text-white rounded-full font-semibold hover:bg-gray-800 transition-all duration-300 transform hover:scale-105"
        >
          <svg class="w-5 h-5 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M10 19l-7-7m0 0l7-7m-7 7h18"/>
          </svg>
          Back to All Articles
        </a>
      </div>
    </section>
  </div>
</Layout>

<style>
  /* Enhanced typography */
  .prose p {
    margin-bottom: 1.5em;
    line-height: 1.8;
  }

  /* First letter styling */
  .first-letter\:text-6xl::first-letter {
    font-size: 4rem;
    font-weight: 700;
    color: #1f2937;
    float: left;
    margin-right: 0.75rem;
    margin-top: 0.25rem;
    line-height: 0.8;
  }

  /* Smooth transitions */
  * {
    transition: all 0.3s ease;
  }

  /* Responsive adjustments */
  @media (max-width: 768px) {
    .first-letter\:text-6xl::first-letter {
      font-size: 3rem;
      margin-right: 0.5rem;
    }
  }

  /* Hover effects */
  .group:hover .group-hover\:scale-105 {
    transform: scale(1.05);
  }

  .hover\:-translate-y-1:hover {
    transform: translateY(-0.25rem);
  }

  /* Smooth scroll */
  html {
    scroll-behavior: smooth;
  }
</style>

<script>
  // Reading progress bar
  document.addEventListener('DOMContentLoaded', function() {
    const progressBar = document.createElement('div');
    progressBar.style.cssText = `
      position: fixed;
      top: 0;
      left: 0;
      width: 0%;
      height: 3px;
      background: linear-gradient(90deg, #3b82f6, #8b5cf6);
      z-index: 9999;
      transition: width 0.3s ease;
    `;
    document.body.appendChild(progressBar);

    window.addEventListener('scroll', function() {
      const windowHeight = document.documentElement.scrollHeight - document.documentElement.clientHeight;
      const scrolled = (window.scrollY / windowHeight) * 100;
      progressBar.style.width = Math.min(scrolled, 100) + '%';
    });
  });
</script>