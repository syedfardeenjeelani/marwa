---
import Layout from '../../layouts/Layout.astro';
import { getPosts } from '../../lib/getPosts';
import TransparentNavbar from '../../components/Navbar';
import { Instagram, MessageCircle, Calendar, Clock, Copy } from 'lucide-react';
import PortableTextRenderer from '../../components/PortableTextRenderer';

// This function is required for dynamic routes
export async function getStaticPaths() {
  // Fetch all blogs to generate paths
  const blogs = await getPosts(); // You'll need this function in your sanity lib
  
  return blogs.map((blog: any) => ({
    params: { slug: blog?.slug?.current },
    props: { blog }, // Pass the blog data as props
  }));
}

// Get the blog data from props (passed from getStaticPaths)
const { blog } : { blog : any} = Astro.props;

// Handle case where blog is not found
if (!blog) {
  return Astro.redirect('/404');
}

// Create proper share URL for production
const baseUrl = import.meta.env.PROD 
  ? 'https://lifeinsujud.blog' // Replace with your actual domain
  : 'https://www.lifeinsujud.blog';
const shareUrl = `${baseUrl}/blog/${blog.slug.current}`;

---

<Layout>
  <div class="min-h-screen bg-gradient-to-br from-slate-50 to-white">
    <TransparentNavbar client:load />
    
    <!-- Main Content Container -->
    <div class="w-full max-w-4xl mx-auto px-4 sm:px-6 lg:px-8 py-16 sm:py-20 lg:py-24">
      
      <!-- Breadcrumb -->
      <nav class="mb-6 sm:mb-8">
        <ol class="flex items-center space-x-1 sm:space-x-2 text-xs sm:text-sm text-gray-600 overflow-x-auto whitespace-nowrap">
          <li><a href="/" class="hover:text-gray-900 transition-colors font-medium flex-shrink-0">Home</a></li>
          <li class="text-gray-400 flex-shrink-0">/</li>
          <li><a href="/blog" class="hover:text-gray-900 transition-colors font-medium flex-shrink-0">Blog</a></li>
          <li class="text-gray-400 flex-shrink-0">/</li>
          <li class="text-gray-900 font-medium truncate">Article</li>
        </ol>
      </nav>

      <!-- Article Title -->
      <header class="mb-8 sm:mb-12">
        <h1 class="text-2xl sm:text-3xl cardo-regular-title lg:text-4xl xl:text-5xl font-bold text-gray-900 leading-tight mb-6 sm:mb-8">
          {blog.title}
        </h1>

        <!-- Meta Information -->
        <div class="flex flex-col sm:flex-row sm:items-center gap-3 sm:gap-6 text-gray-600">
          <div class="flex items-center space-x-2">
            <Calendar className="w-4 h-4 sm:w-5 sm:h-5 flex-shrink-0" />
            <span class="font-medium text-sm sm:text-base">
              {new Date(blog.publishedAt).toLocaleDateString('en-US', { 
                year: 'numeric', 
                month: 'long', 
                day: 'numeric' 
              })}
            </span>
          </div>
          <div class="flex items-center space-x-2">
            <Clock className="w-4 h-4 sm:w-5 sm:h-5 flex-shrink-0" />
            <span class="font-medium text-sm sm:text-base">5 min read</span>
          </div>
        </div>
      </header>

      <!-- Featured Image -->
      <div class="mb-8 sm:mb-12">
        <div class="relative  overflow-hidden rounded-xl sm:rounded-2xl shadow-lg sm:shadow-xl">
          <img 
            src={blog.mainImage?.asset?.url || '/default-blog-image.jpg'} 
            alt={blog.title} 
            class="w-full h-48 sm:h-64 md:h-80 lg:h-96 object-cover" 
          />
        </div>
      </div>

      <!-- Article Content -->
      <article class="prose prose-sm sm:prose-base lg:prose-lg xl:prose-xl max-w-none">
        <div class="text-base sm:text-lg leading-relaxed cardo-regular text-gray-800 space-y-4 sm:space-y-6">
         <PortableTextRenderer value={blog.body} />
        </div>
      </article>

      <!-- Article Footer -->
      <footer class="mt-12 sm:mt-16 pt-6 sm:pt-8 border-t border-gray-200">
        <div class="flex flex-col gap-6 sm:gap-8">
          <!-- Tags -->
          <div class="flex flex-col sm:flex-row sm:items-center gap-3">
            <span class="text-sm font-medium text-gray-600 flex-shrink-0">Tags:</span>
            <div class="flex flex-wrap gap-2">
              {blog.categories?.map((category: any, index: number) => (
                <a key={index} href={`/blog/category/${category?.slug}`} class="inline-flex items-center px-2 sm:px-3 py-1 rounded-full text-xs sm:text-sm font-medium bg-gray-100 text-gray-800 hover:bg-gray-200 transition-colors">
                  #{category.title}
                </a>
              ))}
            </div>
          </div>

          <!-- Share Buttons -->
          <div class="flex flex-col sm:flex-row sm:items-center gap-3 sm:gap-4">
            <span class="text-sm font-medium text-gray-600 flex-shrink-0">Share:</span>
            <div class="flex space-x-2 overflow-x-auto">
              <button 
               id="copy-link-btn"
               class="p-2 sm:p-2.5 rounded-full bg-gray-600 text-white hover:bg-gray-700 transition-colors flex-shrink-0 flex items-center justify-center min-w-[40px] min-h-[40px]" 
               aria-label="Copy Link"
               data-url={shareUrl}
             >
               <Copy className="w-4 h-4" />
             </button>
              <a 
                href={`https://www.instagram.com`}
                target="_blank"
                rel="noopener noreferrer"
                class="p-2 sm:p-2.5 rounded-full bg-pink-600 text-white hover:bg-pink-700 transition-colors flex-shrink-0 flex items-center justify-center min-w-[40px] min-h-[40px]" 
                aria-label="Share on Instagram"
              >
              <Instagram className="w-4 h-4"  />
              </a>
              <a 
                href={`https://wa.me/?text=${encodeURIComponent(blog.title + ' - ' + shareUrl)}`}
                target="_blank"
                rel="noopener noreferrer"
                class="p-2 sm:p-2.5 rounded-full bg-green-600 text-white hover:bg-green-700 transition-colors flex-shrink-0 flex items-center justify-center min-w-[40px] min-h-[40px]" 
                aria-label="Share on WhatsApp"
              >
                <MessageCircle className="w-4 h-4" />
              </a>
            </div>
          </div>
        </div>
      </footer>
    </div> 
    
    <!-- Back to Blog Section -->
    <section class="bg-white py-8 sm:py-12">
      <div class="text-center px-4">
        <a 
          href="/blog" 
          class="inline-flex items-center px-6 sm:px-8 py-2.5 sm:py-3 bg-gray-900 text-white rounded-full font-semibold hover:bg-gray-800 transition-all duration-300 transform hover:scale-105 text-sm sm:text-base"
        >
          <svg class="w-4 h-4 sm:w-5 sm:h-5 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M10 19l-7-7m0 0l7-7m-7 7h18"/>
          </svg>
          Back to All Articles
        </a>
      </div>
    </section>

    <!-- Toast Container for React Toastify -->
    <div id="toast-root"></div>
  </div>
</Layout>

<style>
  /* Enhanced typography */
  .prose p {
    margin-bottom: 1.5em;
    line-height: 1.8;
  }

  /* Responsive first letter styling */
  .first-letter\:text-4xl::first-letter {
    font-size: 2.5rem;
    font-weight: 700;
    color: #1f2937;
    float: left;
    margin-right: 0.5rem;
    margin-top: 0.125rem;
    line-height: 0.8;
  }
   .cardo-regular {
    font-family: "Cardo";
    font-weight: 400;
    letter-spacing: 1.4px;
    list-style: none;
    line-height: 1.6;
    /* text-transform: uppercase; */
    font-style: normal;
    font-size:1.3rem;
    color: #000000;
  }
    .cardo-regular-title {
    font-family: "Cardo";
    font-weight: 400;
    letter-spacing: 1.4px;
    list-style: none;
    line-height: 1.6;
    /* text-transform: uppercase; */
    font-style: normal;
    font-size: 2.5rem;
    color: #000000;
  }

  @media (min-width: 640px) {
    .sm\:first-letter\:text-5xl::first-letter {
      font-size: 3rem;
      margin-right: 0.625rem;
      margin-top: 0.1875rem;
    }
  }

  @media (min-width: 1024px) {
    .lg\:first-letter\:text-6xl::first-letter {
      font-size: 4rem;
      margin-right: 0.75rem;
      margin-top: 0.25rem;
    }
  }

  /* Smooth transitions */
  * {
    transition: all 0.3s ease;
  }

  /* Mobile-specific improvements */
  @media (max-width: 640px) {
    /* Ensure proper text wrapping */
    .prose {
      word-wrap: break-word;
      overflow-wrap: break-word;
    }
    
    /* Better spacing for mobile */
    .prose p {
      margin-bottom: 1.25em;
      line-height: 1.7;
    }
    
    /* Mobile breadcrumb improvements */
    nav ol {
      padding-bottom: 0.5rem;
    }
    
    /* Better button spacing on mobile */
    .flex.space-x-2 > * + * {
      margin-left: 0.5rem;
    }
  }

  /* Touch-friendly improvements */
  @media (hover: none) and (pointer: coarse) {
    a, button {
      min-height: 44px;
      min-width: 44px;
    }
    
    .p-2 {
      padding: 0.625rem;
    }
  }

  /* Hover effects for desktop */
  @media (hover: hover) {
    .group:hover .group-hover\:scale-105 {
      transform: scale(1.05);
    }

    .hover\:-translate-y-1:hover {
      transform: translateY(-0.25rem);
    }
  }

  /* Smooth scroll */
  html {
    scroll-behavior: smooth;
  }

  /* Improved focus states for accessibility */
  button:focus,
  a:focus {
    outline: 2px solid #3b82f6;
    outline-offset: 2px;
  }

  /* Custom Toast Styles */
  .Toastify__toast {
    border-radius: 12px;
    font-family: "Cardo", serif;
    box-shadow: 0 8px 25px rgba(0, 0, 0, 0.15);
    backdrop-filter: blur(10px);
    font-weight: 500;
  }

  .Toastify__toast--success {
    background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
    color: white;
  }

  .Toastify__toast--error {
    background: linear-gradient(135deg, #ff6b6b 0%, #ee5a24 100%);
    color: white;
  }

  .Toastify__progress-bar {
    background: rgba(255, 255, 255, 0.8);
    border-radius: 0 0 12px 12px;
  }

  .Toastify__toast-body {
    font-weight: 500;
    font-size: 14px;
  }

  .Toastify__close-button {
    color: white;
    opacity: 0.8;
  }

  .Toastify__close-button:hover {
    opacity: 1;
  }

  /* Animation enhancements */
  @keyframes slideInRight {
    from {
      transform: translate3d(110%, 0, 0);
      opacity: 0;
    }
    to {
      transform: translate3d(0, 0, 0);
      opacity: 1;
    }
  }

  .Toastify__toast--top-right {
    animation: slideInRight 0.3s ease-out;
  }
</style>

<script>
  // Install: npm install react-toastify
  import { toast, ToastContainer } from 'react-toastify';
  import 'react-toastify/dist/ReactToastify.css';

  // Initialize Toast Container
  function initToastContainer() {
    const toastRoot = document.getElementById('toast-root');
    if (toastRoot && !toastRoot.hasChildNodes()) {
      import('react').then(React => {
        import('react-dom/client').then(({ createRoot }) => {
          const root = createRoot(toastRoot);
          root.render(
            React.createElement(ToastContainer, {
              position: "top-right",
              autoClose: 2500,
              hideProgressBar: false,
              newestOnTop: true,
              closeOnClick: true,
              rtl: false,
              pauseOnFocusLoss: true,
              draggable: true,
              pauseOnHover: true,
              theme: "light",
              toastClassName: "custom-toast",
              bodyClassName: "custom-toast-body",
              progressClassName: "custom-toast-progress",
            })
          );
        });
      });
    }
  }

  // Beautiful toast functions
  function showSuccessToast() {
    toast.success('✨ Link copied to clipboard!', {
      position: "top-right",
      autoClose: 2500,
      hideProgressBar: false,
      closeOnClick: true,
      pauseOnHover: true,
      draggable: true,
      progress: undefined,
      theme: "light",
      style: { background: 'linear-gradient(135deg, #f5f7fa, #e4e9f0)',

        color: 'black',
        borderRadius: '12px',
        fontWeight: '500',
        fontSize: '14px', 
        fontFamily: '"Cardo", serif',
        border: 'none'
      }
    });
  }

  function showErrorToast() {
    toast.error('❌ Failed to copy link', {
      position: "top-right",
      autoClose: 3000,
      hideProgressBar: false,
      closeOnClick: true,
      pauseOnHover: true,
      draggable: true,
      progress: undefined,
      theme: "light",
      style: {
        background: 'linear-gradient(135deg, #ff6b6b 0%, #ee5a24 100%)',
        color: 'white',
        borderRadius: '12px',
        fontWeight: '500',
        fontSize: '14px',
        boxShadow: '0 8px 25px rgba(255, 107, 107, 0.3)',
        fontFamily: '"Cardo", serif',
        border: 'none'
      }
    });
  }

  // Reading progress bar
  document.addEventListener('DOMContentLoaded', function() {
    // Initialize Toast Container
    setTimeout(initToastContainer, 100);

    const progressBar = document.createElement('div');
    progressBar.style.cssText = `
      position: fixed;
      top: 0;
      left: 0;
      width: 0%;
      height: 3px;
      background: linear-gradient(90deg, #3b82f6, #8b5cf6);
      z-index: 9999;
      transition: width 0.3s ease;
    `;
    document.body.appendChild(progressBar);

    document.addEventListener('scroll', function() {
      const windowHeight = document.documentElement.scrollHeight - document.documentElement.clientHeight;
      const scrolled = (document.documentElement.scrollTop / windowHeight) * 100;
      progressBar.style.width = Math.min(scrolled, 100) + '%';
    });
  });

  // Enhanced Copy link functionality with beautiful toast
  document.addEventListener('DOMContentLoaded', function() {
    const copyBtn = document.getElementById('copy-link-btn');
    
    if (copyBtn) {
      copyBtn.addEventListener('click', async function() {
        const url = this.getAttribute('data-url');
        
        // Add loading state
        const originalContent = this.innerHTML;
        this.innerHTML = '<div class="w-4 h-4 border-2 border-white border-t-transparent rounded-full animate-spin"></div>';
        this.disabled = true;
        
        try {
          if (navigator.clipboard && navigator.clipboard.writeText) {
            await navigator.clipboard.writeText(url);
          } else {
            // Fallback for older browsers
            const textArea = document.createElement('textarea');
            textArea.value = url;
            textArea.style.position = 'fixed';
            textArea.style.left = '-999999px';
            textArea.style.top = '-999999px';
            document.body.appendChild(textArea);
            textArea.focus();
            textArea.select();
            document.execCommand('copy');
            textArea.remove();
          }
          
          // Show beautiful success toast
          showSuccessToast();
          
        } catch (err) {
          console.error('Failed to copy: ', err);
          // Show beautiful error toast
          showErrorToast();
        } finally {
          // Restore button state
          setTimeout(() => {
            this.innerHTML = originalContent;
            this.disabled = false;
          }, 500);
        }
      });
    }
  });

  // Smooth scrolling for internal links
  document.addEventListener('DOMContentLoaded', function() {
    const links = document.querySelectorAll('a[href^="#"]');
    links.forEach(link => {
      link.addEventListener('click', function(e) {
        e.preventDefault();
        const targetId = this.getAttribute('href');
        const targetElement = document.querySelector(targetId);
        if (targetElement) {
          targetElement.scrollIntoView({
            behavior: 'smooth'
          });
        }
      });
    });
  });
</script>